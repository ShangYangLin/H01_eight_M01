# -*- coding: utf-8 -*-
"""Sub-plan8_M01 for NTU AI Project_DL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aa35-QYd9741R-Nxqh54z9djUQtjCEwS
"""

!pip install tensorflow

import io
from google.colab import files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from keras.layers import LSTM
from sklearn.model_selection import train_test_split

# 上傳excel檔案
uploaded = files.upload()

df_data = pd.read_excel(io.BytesIO(uploaded['M01資料表.xlsx']))
print(len(df_data))
df_data.head()

##bins=[0, 18, 24, 31],
df_data['Label'] = pd.cut(x=df_data['MMSE Total (30)'], bins=[0, 27, 31],
                     labels=[0, 1])
print(df_data['Label'].value_counts())

y = df_data['Label'].astype('category').cat.codes
df_data1 = df_data.drop(columns=['MMSE Total (30)', '研究一'])
X = df_data1.drop(labels=['Label'],axis=1).values # 移除Label並取得剩下欄位資料
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=23, stratify=y)

print('train shape:', X_train.shape)
print('test shape:', X_test.shape)

#NORMALIZATION
#Ref: https://ithelp.ithome.com.tw/articles/10197357, https://aifreeblog.herokuapp.com/posts/54/data_science_203/
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler().fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

model = Sequential()

model.add(Dense(30, activation='relu', input_shape=(90,)))
model.add(Dense(30, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
print(model.summary())

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10, batch_size=5, verbose=1)

y_pred = model.predict(X_test)
score = model.evaluate(X_test, y_test, verbose=1)
print(score)

#儲存模型
model.save('/content/sample_data/M01.keras')

#儲存模型參數權重
model.save_weights("/content/sample_data/M01.weights.h5")